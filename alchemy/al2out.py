
from constraint import *
problem = Problem()

problem.addVariables([chr(64+x) for x in range(1, 26)], range(1, 26))

problem.addConstraint(AllDifferentConstraint())

problem.addConstraint(lambda J: J % 2 == 1, ["J"])
problem.addConstraint(lambda M, I: abs(M - I) == 8, ["M", "I"])
problem.addConstraint(lambda D: D % 2 == 1, ["D"])
problem.addConstraint(lambda P: P % 2 == 0, ["P"])
problem.addConstraint(lambda A, C: abs(A - C) == 2, ["A", "C"])
problem.addConstraint(lambda O, Y: abs(O - Y) == 9, ["O", "Y"])
problem.addConstraint(lambda A: A % 2 == 0, ["A"])
problem.addConstraint(lambda L, A: abs(L - A) == 4, ["L", "A"])
problem.addConstraint(lambda I: I % 2 == 0, ["I"])
problem.addConstraint(lambda E: E % 2 == 1, ["E"])
problem.addConstraint(lambda K, P: abs(K - P) == 9, ["K", "P"])
problem.addConstraint(lambda R, U: R < U, ["R", "U"])
problem.addConstraint(lambda K, D: abs(K - D) == 8, ["K", "D"])
problem.addConstraint(lambda O, H: abs(O - H) == 5, ["O", "H"])
problem.addConstraint(lambda T: T % 2 == 0, ["T"])
problem.addConstraint(lambda T, H: abs(T - H) == 10, ["T", "H"])
problem.addConstraint(lambda U, W: abs(U - W) == 17, ["U", "W"])
problem.addConstraint(lambda S: S % 2 == 0, ["S"])
problem.addConstraint(lambda G: G % 2 == 1, ["G"])
problem.addConstraint(lambda I, W: I > W, ["I", "W"])
problem.addConstraint(lambda D, S: D > S, ["D", "S"])
problem.addConstraint(lambda X, L: abs(X - L) == 19, ["X", "L"])
problem.addConstraint(lambda U, C: U > C, ["U", "C"])
problem.addConstraint(lambda G, B: abs(G - B) == 5, ["G", "B"])
problem.addConstraint(lambda P, N: P > N, ["P", "N"])
problem.addConstraint(lambda F, Y: abs(F - Y) == 15, ["F", "Y"])
problem.addConstraint(lambda M: M % 2 == 0, ["M"])
problem.addConstraint(lambda G, Q: G > Q, ["G", "Q"])
problem.addConstraint(lambda E, N: abs(E - N) == 16, ["E", "N"])
problem.addConstraint(lambda Y: Y % 2 == 0, ["Y"])
problem.addConstraint(lambda Q, C: abs(Q - C) == 3, ["Q", "C"])
problem.addConstraint(lambda J, S: J > S, ["J", "S"])
problem.addConstraint(lambda L, Q: abs(L - Q) == 1, ["L", "Q"])
problem.addConstraint(lambda Y, X: Y < X, ["Y", "X"])
problem.addConstraint(lambda H, I: abs(H - I) == 12, ["H", "I"])
problem.addConstraint(lambda Q, J: Q < J, ["Q", "J"])
problem.addConstraint(lambda B: B % 2 == 0, ["B"])
problem.addConstraint(lambda S, X: S < X, ["S", "X"])
problem.addConstraint(lambda R, G: R < G, ["R", "G"])
problem.addConstraint(lambda T, B: abs(T - B) == 6, ["T", "B"])
problem.addConstraint(lambda Q: Q % 2 == 1, ["Q"])
problem.addConstraint(lambda E, U: abs(E - U) == 4, ["E", "U"])
problem.addConstraint(lambda E, H: E > H, ["E", "H"])
problem.addConstraint(lambda R, V: R > V, ["R", "V"])

sol = problem.getSolution()
print(sol)

res = ""
while len(sol):
	lowest = min(zip(sol.values(), sol.keys()))
	res += f"{lowest[1]} "
	sol.pop(lowest[1])
print(res)
